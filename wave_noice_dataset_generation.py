# -*- coding: utf-8 -*-
"""Wave_Noice_dataset_generation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eEqM4pylDayQSXFuNXbCYWQKH474imPO
"""

import scipy.io

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os

path = os.listdir('/content/drive/MyDrive/Dataset/C')
MatData = []
for mat in path:
  mat_file = scipy.io.loadmat('/content/drive/MyDrive/Dataset/C/'+ mat)
  MatData.append(mat_file)

MatData = np.array(MatData)
MatData.shape

MatData[0]

signals = []
for i in range(len(MatData)):
  G = MatData[i]['Cm']
  signals.append(G)

signals = np.array(signals)
signals.shape

#converting to 2D matrix
signals = np.squeeze(signals, axis=-1)
signals.shape

Y = []
for i in range(100000):
  Y.append(i)
Y = np.array(Y)
fig, axs = plt.subplots(2, 3, figsize=(12, 8))  # 2 rows and 3 columns of subplots
# Plot data in each subplot
k = 0
for i in range(2):
    for j in range(3):
        subplot_index = i * 3 + j
        axs[i, j].plot(Y,signals[k] )
        axs[i, j].set_title(f"C {k+1}")
        k+=1

"""## **Generating Dataset**
Mean<br>
Standard deviation<br>
Skewness<br>
Kurtosis<br>
Root Mean Square (RMS)<br>
Zero-Crossing Rate<br>
Energy<br>
Entropy<br>
"""

data = pd.read_excel('/content/drive/MyDrive/Dataset/Book 1.xlsx')

#calculate mean
mean_values = [] #array that contains all the mean values of the signals
mean = 0
for i in range(len(signals)):
  mean =  np.mean(signals[i])
  mean_values.append(mean)

data['Mean'] = mean_values

data.to_excel('/content/drive/MyDrive/Dataset/Book 1.xlsx',index = False)

#calculating the standard deviation
SD_values = []
sigma = 0
for i in range(len(signals)):
  sigma  = np.std(signals[i])
  SD_values.append(sigma)

data['Standard Deviation'] = SD_values
data.to_excel('/content/drive/MyDrive/Dataset/Book 1.xlsx',index = False)

from scipy.stats import skew, kurtosis
skewness_values = []
sk = 0                 #skewness for a single signal
kurtosis_values = []
krt = 0                #kurtosis for a single signal
for i in range(len(signals)):
  sk = skew(signals[i], axis=0, bias=True)
  krt = kurtosis(signals[i], axis=0, bias=True)
  skewness_values.append(sk)
  kurtosis_values.append(krt)

data['Skewness'] = skewness_values
data['Kurtosis'] = kurtosis_values
data.to_excel('/content/drive/MyDrive/Dataset/Book 1.xlsx',index = False)

import math
def rmsValue(arr):
    square = 0
    mean = 0.0
    root = 0.0
    n = len(arr)
    #Calculate square
    for i in range(0,n):
        square += (arr[i]**2)
    #Calculate Mean
    mean = (square / (float)(n))
    #Calculate Root
    root = math.sqrt(mean)
    return root

rms_values = []
rms = 0
for i in range(len(signals)):
  rms = rmsValue(signals[i])
  rms_values.append(rms)
data['RMS'] = rms_values
data.to_excel('/content/drive/MyDrive/Dataset/Book 1.xlsx',index = False)

import numpy as np

def energy(x):
  """Calculates the energy of a signal.
  Args:
    signal: The signal to calculate the energy of. ndarray
  Returns:
    The energy of the signal.
  """
  energy = np.sum(x**2)
  return energy

energy_single_signal = 0
energy_values = []
for i in range(len(signals)):
  energy_single_signal = energy(signals[i])
  energy_values.append(energy_single_signal)
data['Energy'] = energy_values
data.to_excel('/content/drive/MyDrive/Dataset/Book 1.xlsx',index = False)

